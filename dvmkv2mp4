#!/usr/bin/env bash
#
# DV/HDR10+ MKV → MP4 Converter 1.0.3
# Converts Dolby Vision Profile 7 MKVs to single‑layer Dolby Vision MP4 (Profile 8.1)
# Usage: dvmkv2mp4 [OPTIONS]
#   -f, --file FILE    Process only this MKV file (path relative to /convert)
#   -s, --add-subs     Include subtitles in output
#   -h, --help         Show this help
#   -v, --version      Show version

set -euo pipefail

VERSION="1.0.3"
ADDSUBS="no"
SINGLEFILE=""

log()   { echo "[INFO]  $*"; }
warn()  { echo "[WARN]  $*"; }
error() { echo "[ERROR] $*" >&2; exit 1; }

print_help() {
  cat <<EOF
DV/HDR10+ MKV → MP4 Converter $VERSION
Usage: $(basename "$0") [OPTIONS]
  -f, --file FILE    Process only this MKV file
  -s, --add-subs     Include subtitles in output
  -h, --help         Show this help
  -v, --version      Show version
EOF
  exit 0
}

# Parse flags
TEMP=$(getopt -o hsf:v --long help,add-subs,file:,version -n "$(basename "$0")" -- "$@")
if [[ $? -ne 0 ]]; then error "Invalid arguments"; fi
eval set -- "$TEMP"
while true; do
  case "$1" in
    -h|--help)     print_help ;; 
    -v|--version)  echo "$(basename "$0") v$VERSION"; exit 0 ;; 
    -s|--add-subs) ADDSUBS="yes"; shift ;; 
    -f|--file)     SINGLEFILE="$2"; shift 2 ;; 
    --)            shift; break ;; 
    *)             break ;; 
  esac
done

# Detect platform
if [[ "$OSTYPE" == "darwin"* ]]; then
  ionc="ionice --low"
  sedcmd="gsed"
else
  ionc="ionice -c3"
  sedcmd="sed"
fi

# Dependencies
for cmd in mediainfo jq ffmpeg ffprobe mkvmerge mkvextract PgsToSrt dovi_tool MP4Box; do
  command -v "$cmd" >/dev/null 2>&1 || error "Required tool '$cmd' not found"
done

# Process one file
def process_file() {
  local input="$1"
  log "Processing '$input'"
  [[ -f "/convert/$input.doconverting" ]] && { warn "Skipping in-progress"; return; }
  touch "/convert/$input.doconverting"

  # Collect metadata
  local mi dv_info dv_profile_str dv_profile
  mi=$(mediainfo "/convert/$input" --Output=JSON)
  dv_info=$(jq -r '.media.track[] | select(."@type"=="Video") | .HDR_Format // ""' <<<"$mi")
  dv_profile_str=$(jq -r '.media.track[] | select(."@type"=="Video") | .HDR_Format_Profile // ""' <<<"$mi")
  if [[ "$dv_info" != *"Dolby Vision"* ]]; then
    warn "No Dolby Vision, skipping"; rm -f "/convert/$input.doconverting"; return
  fi
  if [[ "$dv_profile_str" =~ dvhe\.[0]*([4578]) ]]; then
    dv_profile=${BASH_REMATCH[1]}
    log "Detected DV profile $dv_profile"
  else
    error "Unsupported DV profile string '$dv_profile_str'"
  fi

  cd /convert
  mkdir -p tmp
  local bl=BL.hevc rpu=RPU.bin blr=BL_RPU.hevc output
  output="${input%.*}-MP4.mp4"

  if [[ "$dv_profile" == "7" ]]; then
    log "Converting Profile 7 → 8.1"
    eval $ionc ffmpeg -i "$input" -y -loglevel error -stats \
      -map 0:v:0 -c:v copy -bsf:v hevc_mp4toannexb -f hevc $bl \
      -map 0:v:1 -c:v copy -bsf:v hevc_mp4toannexb -f hevc - \|
      $ionc dovi_tool -m 2 extract-rpu - -o $rpu
    $ionc dovi_tool inject-rpu --input $bl --rpu-in $rpu -o $blr
  else
    log "Profile $dv_profile: remuxing"
    $ionc ffmpeg -i "$input" -y -loglevel error -stats \
      -map 0:v:0 -c:v copy -bsf:v hevc_mp4toannexb -f hevc $blr
  fi

  # Subtitles
  if [[ "$ADDSUBS" == "yes" ]]; then
    mapfile -t subs < <(mkvmerge -J "$input" | jq -r '.tracks[] | select(.type=="subtitles") | .id')
    for id in "${subs[@]}"; do
      mkvextract tracks "$input" ${id}:sub${id}.sup || continue
      PgsToSrt sub${id}.sup sub${id}.srt || continue
      rm -f sub${id}.sup
    done
  fi

  # Audio
  ffprobe -v error -select_streams a -show_entries stream=index,codec_name -of csv=p=0 "$input" > audio.list
  > audio.exports
  while IFS=',' read -r i c; do
    if [[ "$c" =~ ^(truehd|dts|dts_ma)$ ]]; then
      ffmpeg -i "$input" -map 0:a:$i -c:a eac3 -b:a 1536k audio_${i}.eac3 -y -loglevel error
      echo "audio_${i}.eac3|und" >> audio.exports
    else
      ffmpeg -i "$input" -map 0:a:$i -c:a copy audio_${i}.${c} -y -loglevel error
      echo "audio_${i}.${c}|und" >> audio.exports
    fi
done < audio.list

  # Chapters
  mkvextract chapters "$input" --simple chapters.txt 2>/dev/null || true

  # Mux
  log "Muxing to MP4"
  cmd=( MP4Box -add $blr:dv-profile=8.1:fps=auto )
  while IFS='|' read -r st lg; do cmd+=( -add "$st":lang=$lg ); done < audio.exports
  if [[ "$ADDSUBS" == "yes" ]]; then for s in *.srt; do cmd+=( -add "$s":lang=und ); done; fi
  [[ -s chapters.txt ]] && cmd+=( -chap chapters.txt )
  cmd+=( -tmp tmp -brand mp42isom -ab dby1 "$output" )
  "${cmd[@]}"

  # Cleanup
  rm -f "$input.doconverting" BL*.hevc $rpu audio.* .* exports chapters.txt tmp *.srt
  log "Created $output"
}

cd /convert
if [[ -n "$SINGLEFILE" ]]; then
  process_file "$SINGLEFILE"
else
  shopt -s nullglob
  for f in *.mkv; do process_file "$f"; done
  shopt -u nullglob
fi
